// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.3
// source: bids.proto

package bidder

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GhostBid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdvertiserId             int32   `protobuf:"varint,1,opt,name=advertiser_id,json=advertiserId,proto3" json:"advertiser_id,omitempty"`
	CampaignId               int32   `protobuf:"varint,2,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	PlacementId              int32   `protobuf:"varint,3,opt,name=placement_id,json=placementId,proto3" json:"placement_id,omitempty"`
	CreativeId               int32   `protobuf:"varint,4,opt,name=creative_id,json=creativeId,proto3" json:"creative_id,omitempty"`
	Dma                      string  `protobuf:"bytes,5,opt,name=dma,proto3" json:"dma,omitempty"`
	BidId                    string  `protobuf:"bytes,7,opt,name=bid_id,json=bidId,proto3" json:"bid_id,omitempty"`
	ImpId                    string  `protobuf:"bytes,8,opt,name=imp_id,json=impId,proto3" json:"imp_id,omitempty"`
	DealId                   string  `protobuf:"bytes,9,opt,name=deal_id,json=dealId,proto3" json:"deal_id,omitempty"`
	Domain                   string  `protobuf:"bytes,10,opt,name=domain,proto3" json:"domain,omitempty"`
	Page                     string  `protobuf:"bytes,11,opt,name=page,proto3" json:"page,omitempty"`
	UserId                   string  `protobuf:"bytes,12,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GeoCountry               string  `protobuf:"bytes,13,opt,name=geo_country,json=geoCountry,proto3" json:"geo_country,omitempty"`
	GeoCity                  string  `protobuf:"bytes,14,opt,name=geo_city,json=geoCity,proto3" json:"geo_city,omitempty"`
	GeoZip                   string  `protobuf:"bytes,15,opt,name=geo_zip,json=geoZip,proto3" json:"geo_zip,omitempty"`
	GeoMetro                 string  `protobuf:"bytes,16,opt,name=geo_metro,json=geoMetro,proto3" json:"geo_metro,omitempty"`
	InventorySource          string  `protobuf:"bytes,17,opt,name=inventory_source,json=inventorySource,proto3" json:"inventory_source,omitempty"`
	Devicetype               string  `protobuf:"bytes,18,opt,name=devicetype,proto3" json:"devicetype,omitempty"`
	Price                    float32 `protobuf:"fixed32,19,opt,name=price,proto3" json:"price,omitempty"`
	DataCenter               string  `protobuf:"bytes,20,opt,name=data_center,json=dataCenter,proto3" json:"data_center,omitempty"`
	TimestampUtc             string  `protobuf:"bytes,21,opt,name=timestamp_utc,json=timestampUtc,proto3" json:"timestamp_utc,omitempty"`
	CreativeType             string  `protobuf:"bytes,22,opt,name=creative_type,json=creativeType,proto3" json:"creative_type,omitempty"`
	IndividualId             string  `protobuf:"bytes,23,opt,name=individual_id,json=individualId,proto3" json:"individual_id,omitempty"`
	IpAddress                string  `protobuf:"bytes,24,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	HouseholdId              string  `protobuf:"bytes,25,opt,name=household_id,json=householdId,proto3" json:"household_id,omitempty"`
	Testing                  bool    `protobuf:"varint,26,opt,name=testing,proto3" json:"testing,omitempty"`
	InternalRequestId        string  `protobuf:"bytes,27,opt,name=internal_request_id,json=internalRequestId,proto3" json:"internal_request_id,omitempty"`
	ExternalRequestId        string  `protobuf:"bytes,28,opt,name=external_request_id,json=externalRequestId,proto3" json:"external_request_id,omitempty"`
	CurrencyCode             string  `protobuf:"bytes,29,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	PriceInLocalCurrency     float32 `protobuf:"fixed32,30,opt,name=price_in_local_currency,json=priceInLocalCurrency,proto3" json:"price_in_local_currency,omitempty"`
	Epoch                    int64   `protobuf:"varint,31,opt,name=epoch,proto3" json:"epoch,omitempty"`
	IsDummy                  bool    `protobuf:"varint,32,opt,name=isDummy,proto3" json:"isDummy,omitempty"`
	LocalToUsdConversionRate float64 `protobuf:"fixed64,33,opt,name=local_to_usd_conversion_rate,json=localToUsdConversionRate,proto3" json:"local_to_usd_conversion_rate,omitempty"`
}

func (x *GhostBid) Reset() {
	*x = GhostBid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bids_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GhostBid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GhostBid) ProtoMessage() {}

func (x *GhostBid) ProtoReflect() protoreflect.Message {
	mi := &file_bids_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GhostBid.ProtoReflect.Descriptor instead.
func (*GhostBid) Descriptor() ([]byte, []int) {
	return file_bids_proto_rawDescGZIP(), []int{0}
}

func (x *GhostBid) GetAdvertiserId() int32 {
	if x != nil {
		return x.AdvertiserId
	}
	return 0
}

func (x *GhostBid) GetCampaignId() int32 {
	if x != nil {
		return x.CampaignId
	}
	return 0
}

func (x *GhostBid) GetPlacementId() int32 {
	if x != nil {
		return x.PlacementId
	}
	return 0
}

func (x *GhostBid) GetCreativeId() int32 {
	if x != nil {
		return x.CreativeId
	}
	return 0
}

func (x *GhostBid) GetDma() string {
	if x != nil {
		return x.Dma
	}
	return ""
}

func (x *GhostBid) GetBidId() string {
	if x != nil {
		return x.BidId
	}
	return ""
}

func (x *GhostBid) GetImpId() string {
	if x != nil {
		return x.ImpId
	}
	return ""
}

func (x *GhostBid) GetDealId() string {
	if x != nil {
		return x.DealId
	}
	return ""
}

func (x *GhostBid) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *GhostBid) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *GhostBid) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GhostBid) GetGeoCountry() string {
	if x != nil {
		return x.GeoCountry
	}
	return ""
}

func (x *GhostBid) GetGeoCity() string {
	if x != nil {
		return x.GeoCity
	}
	return ""
}

func (x *GhostBid) GetGeoZip() string {
	if x != nil {
		return x.GeoZip
	}
	return ""
}

func (x *GhostBid) GetGeoMetro() string {
	if x != nil {
		return x.GeoMetro
	}
	return ""
}

func (x *GhostBid) GetInventorySource() string {
	if x != nil {
		return x.InventorySource
	}
	return ""
}

func (x *GhostBid) GetDevicetype() string {
	if x != nil {
		return x.Devicetype
	}
	return ""
}

func (x *GhostBid) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *GhostBid) GetDataCenter() string {
	if x != nil {
		return x.DataCenter
	}
	return ""
}

func (x *GhostBid) GetTimestampUtc() string {
	if x != nil {
		return x.TimestampUtc
	}
	return ""
}

func (x *GhostBid) GetCreativeType() string {
	if x != nil {
		return x.CreativeType
	}
	return ""
}

func (x *GhostBid) GetIndividualId() string {
	if x != nil {
		return x.IndividualId
	}
	return ""
}

func (x *GhostBid) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *GhostBid) GetHouseholdId() string {
	if x != nil {
		return x.HouseholdId
	}
	return ""
}

func (x *GhostBid) GetTesting() bool {
	if x != nil {
		return x.Testing
	}
	return false
}

func (x *GhostBid) GetInternalRequestId() string {
	if x != nil {
		return x.InternalRequestId
	}
	return ""
}

func (x *GhostBid) GetExternalRequestId() string {
	if x != nil {
		return x.ExternalRequestId
	}
	return ""
}

func (x *GhostBid) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GhostBid) GetPriceInLocalCurrency() float32 {
	if x != nil {
		return x.PriceInLocalCurrency
	}
	return 0
}

func (x *GhostBid) GetEpoch() int64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *GhostBid) GetIsDummy() bool {
	if x != nil {
		return x.IsDummy
	}
	return false
}

func (x *GhostBid) GetLocalToUsdConversionRate() float64 {
	if x != nil {
		return x.LocalToUsdConversionRate
	}
	return 0
}

type GhostBidBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts      int64       `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
	Payload []*GhostBid `protobuf:"bytes,2,rep,name=payload,proto3" json:"payload,omitempty"`
}

func (x *GhostBidBatch) Reset() {
	*x = GhostBidBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bids_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GhostBidBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GhostBidBatch) ProtoMessage() {}

func (x *GhostBidBatch) ProtoReflect() protoreflect.Message {
	mi := &file_bids_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GhostBidBatch.ProtoReflect.Descriptor instead.
func (*GhostBidBatch) Descriptor() ([]byte, []int) {
	return file_bids_proto_rawDescGZIP(), []int{1}
}

func (x *GhostBidBatch) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *GhostBidBatch) GetPayload() []*GhostBid {
	if x != nil {
		return x.Payload
	}
	return nil
}

var File_bids_proto protoreflect.FileDescriptor

var file_bids_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x62, 0x69, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x22, 0x9d, 0x08, 0x0a, 0x08, 0x47, 0x68, 0x6f, 0x73, 0x74, 0x42, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x64,
	0x6d, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6d, 0x61, 0x12, 0x15, 0x0a,
	0x06, 0x62, 0x69, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62,
	0x69, 0x64, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x6d, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x64,
	0x65, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65,
	0x61, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x65, 0x6f,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x67, 0x65, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x65,
	0x6f, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x65,
	0x6f, 0x43, 0x69, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x65, 0x6f, 0x5f, 0x7a, 0x69, 0x70,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6f, 0x5a, 0x69, 0x70, 0x12, 0x1b,
	0x0a, 0x09, 0x67, 0x65, 0x6f, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x4d, 0x65, 0x74, 0x72, 0x6f, 0x12, 0x29, 0x0a, 0x10, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x74, 0x63, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55,
	0x74, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x64, 0x69, 0x76,
	0x69, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a,
	0x17, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73,
	0x44, 0x75, 0x6d, 0x6d, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x44,
	0x75, 0x6d, 0x6d, 0x79, 0x12, 0x3e, 0x0a, 0x1c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x6f,
	0x5f, 0x75, 0x73, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x54, 0x6f, 0x55, 0x73, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x61, 0x74, 0x65, 0x22, 0x4b, 0x0a, 0x0d, 0x47, 0x68, 0x6f, 0x73, 0x74, 0x42, 0x69, 0x64,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x47, 0x68, 0x6f, 0x73, 0x74, 0x42, 0x69, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x42, 0x10, 0x5a, 0x0e, 0x2f, 0x62, 0x69, 0x64, 0x64, 0x65, 0x72, 0x3b, 0x62, 0x69, 0x64,
	0x64, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bids_proto_rawDescOnce sync.Once
	file_bids_proto_rawDescData = file_bids_proto_rawDesc
)

func file_bids_proto_rawDescGZIP() []byte {
	file_bids_proto_rawDescOnce.Do(func() {
		file_bids_proto_rawDescData = protoimpl.X.CompressGZIP(file_bids_proto_rawDescData)
	})
	return file_bids_proto_rawDescData
}

var file_bids_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_bids_proto_goTypes = []interface{}{
	(*GhostBid)(nil),      // 0: models.GhostBid
	(*GhostBidBatch)(nil), // 1: models.GhostBidBatch
}
var file_bids_proto_depIdxs = []int32{
	0, // 0: models.GhostBidBatch.payload:type_name -> models.GhostBid
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_bids_proto_init() }
func file_bids_proto_init() {
	if File_bids_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bids_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GhostBid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bids_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GhostBidBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bids_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bids_proto_goTypes,
		DependencyIndexes: file_bids_proto_depIdxs,
		MessageInfos:      file_bids_proto_msgTypes,
	}.Build()
	File_bids_proto = out.File
	file_bids_proto_rawDesc = nil
	file_bids_proto_goTypes = nil
	file_bids_proto_depIdxs = nil
}
